{% extends 'base.html.twig' %}

{% block title %}Chat avec {{ destinataire.email }}{% endblock %}

{% block body %}
<div class="container-fluid">
    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>Conversations</h5>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush">
                        <a href="{{ path('app_chat_index') }}" class="list-group-item list-group-item-action">
                            ← Retour aux conversations
                        </a>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5>Conversation avec {{ destinataire.email }}</h5>
                </div>
                
                <div class="card-body" style="height: 400px; overflow-y: auto;" id="messages-container">
                    <div id="messages-list">
                        {% for message in messages %}
                            <div class="message-item mb-3 {% if message.expediteur.id == current_user.id %}text-end{% endif %}" data-message-id="{{ message.id }}">
                                <div class="d-inline-block p-2 rounded {% if message.expediteur.id == current_user.id %}bg-primary text-white{% else %}bg-light{% endif %}" style="max-width: 70%;">
                                    <div>{{ message.contenu|nl2br }}</div>
                                    <small class="{% if message.expediteur.id == current_user.id %}text-light{% else %}text-muted{% endif %}">
                                        {{ message.createdAt|date('d/m/Y H:i') }}
                                        {% if message.expediteur.id == current_user.id %}
                                            {% if message.isRead %}
                                                <i class="bi bi-check2-all text-info"></i>
                                            {% else %}
                                                <i class="bi bi-check2"></i>
                                            {% endif %}
                                        {% endif %}
                                    </small>
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                </div>
                
                <div class="card-footer">
                    <form id="message-form" class="d-flex">
                        <div class="flex-grow-1 me-2">
                            <textarea id="message-content" class="form-control" rows="2" placeholder="Tapez votre message..." required></textarea>
                        </div>
                        <div class="align-self-end">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-send"></i> Envoyer
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
    $(document).ready(function() {
        var destinataireId = {{ destinataire.id }};
        var currentUserId = {{ current_user.id }};
        var lastMessageTime = null;
        var pollingInterval;
        var displayedMessages = new Set();
        
        // Initialiser le temps du dernier message au format ISO
        {% if messages|length > 0 %}
            lastMessageTime = '{{ messages|last.createdAt|date('c') }}';
            {% for message in messages %}
                displayedMessages.add({{ message.id }});
            {% endfor %}
        {% endif %}
        
        scrollToBottom();
        startPolling();
        
        $('#message-form').on('submit', function(e) {
            e.preventDefault();
            sendMessage();
        });
        
        $('#message-content').on('keydown', function(e) {
            if (e.ctrlKey && e.keyCode === 13) {
                e.preventDefault();
                sendMessage();
            }
        });
        
        function sendMessage() {
            var content = $('#message-content').val().trim();
            
            if (content === '') {
                return;
            }
            
            $('#message-form button').prop('disabled', true);
            
            $.ajax({
                url: '{{ path('api_chat_send', {'id': destinataire.id}) }}',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    contenu: content
                }),
                success: function(response) {
                    if (!displayedMessages.has(response.id)) {
                        addMessageToList(response, true);
                        displayedMessages.add(response.id);
                        lastMessageTime = response.createdAt;
                        scrollToBottom();
                    }
                    $('#message-content').val('');
                },
                error: function(xhr) {
                    var error = JSON.parse(xhr.responseText);
                    alert('Erreur: ' + error.error);
                },
                complete: function() {
                    $('#message-form button').prop('disabled', false);
                }
            });
        }
        
        function startPolling() {
            pollingInterval = setInterval(function() {
                checkForNewMessages();
                updateReadStatus(); // Nouvelle fonction pour mettre à jour le statut "vu"
            }, 2000);
        }
        
        function checkForNewMessages() {
            var url = '{{ path('api_chat_messages', {'id': destinataire.id}) }}';
            
            if (lastMessageTime) {
                url += '?since=' + encodeURIComponent(lastMessageTime);
            }
            
            $.ajax({
                url: url,
                type: 'GET',
                success: function(messages) {
                    if (messages.length > 0) {
                        var hasNewMessages = false;
                        
                        messages.forEach(function(message) {
                            if (!displayedMessages.has(message.id)) {
                                addMessageToList(message, message.expediteur.id === currentUserId);
                                displayedMessages.add(message.id);
                                hasNewMessages = true;
                            }
                        });
                        
                        if (hasNewMessages) {
                            var lastMessage = messages[messages.length - 1];
                            lastMessageTime = lastMessage.createdAt;
                            scrollToBottom();
                        }
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Erreur lors du polling:', xhr.responseText);
                }
            });
        }
        
        // Nouvelle fonction pour mettre à jour le statut "vu"
        function updateReadStatus() {
            $.ajax({
                url: '{{ path('api_chat_messages', {'id': destinataire.id}) }}',
                type: 'GET',
                success: function(messages) {
                    messages.forEach(function(message) {
                        if (message.expediteur.id === currentUserId) {
                            // Mettre à jour l'icône de lecture pour nos messages
                            updateMessageReadIcon(message.id, message.isRead);
                        }
                    });
                }
            });
        }
        
        function updateMessageReadIcon(messageId, isRead) {
            var messageElement = $('[data-message-id="' + messageId + '"]');
            if (messageElement.length > 0) {
                var iconElement = messageElement.find('small i');
                if (iconElement.length > 0) {
                    if (isRead) {
                        iconElement.removeClass('bi-check2').addClass('bi-check2-all text-info');
                    } else {
                        iconElement.removeClass('bi-check2-all text-info').addClass('bi-check2');
                    }
                }
            }
        }
        
        function addMessageToList(message, isCurrentUser) {
            var messageClass = isCurrentUser ? 'text-end' : '';
            var bubbleClass = isCurrentUser ? 'bg-primary text-white' : 'bg-light';
            var timeClass = isCurrentUser ? 'text-light' : 'text-muted';
            var readIcon = '';
            
            if (isCurrentUser) {
                readIcon = message.isRead ?
                    '<i class="bi bi-check2-all text-info"></i>' :
                    '<i class="bi bi-check2"></i>';
            }
            
            var messageHtml = `
                <div class="message-item mb-3 ${messageClass}" data-message-id="${message.id}">
                    <div class="d-inline-block p-2 rounded ${bubbleClass}" style="max-width: 70%;">
                        <div>${message.contenu.replace(/\n/g, '<br>')}</div>
                        <small class="${timeClass}">
                            ${formatDate(message.createdAt)}
                            ${readIcon}
                        </small>
                    </div>
                </div>
            `;
            
            $('#messages-list').append(messageHtml);
        }
        
        function scrollToBottom() {
            var container = $('#messages-container');
            container.scrollTop(container[0].scrollHeight);
        }
        
        function formatDate(dateString) {
            var date = new Date(dateString);
            
            if (isNaN(date.getTime())) {
                console.error('Date invalide:', dateString);
                return 'Date invalide';
            }
            
            // Utiliser la timezone locale du navigateur
            return date.toLocaleDateString('fr-FR', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }
        
        $(window).on('beforeunload', function() {
            if (pollingInterval) {
                clearInterval(pollingInterval);
            }
        });
    });
</script>
{% endblock %}

